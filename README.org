* Postgres Based timesheet application
** How to use
   Initial startup & usage
   #+BEGIN_SRC bash
   make docker-start  # just so that it doesnt muck with any other postgresql's
   make createdb   # creates the "timesheet" repo, *"public" may or may not be deleted*
   PROJECT=work make schema # creates the "work" timesheet schema
   PROJECT=personal make schema  # createst the "personal" timesheet schema
   make clockin REASON="Go to job" PROJECT="work"
   make clockin REASON="Do some personal stuff" PROJECT="personal" # Won't work! you're still clocked into work!
   make clockout REASON="go home" PROJECT="work"
   make clockin REASON="Go shopping" PROJECT="personal"  # Good, don't mulitask, it's bad for you.
   #+END_SRC
   
   What was done:
   #+BEGIN_SRC bash
   make today PROJECT=work # what did I work on today
   make all-tasks PROJECT=personal # show me ALL my personal tasks done...
   #+END_SRC
   
   Backing up & restore
   Email config:
   #+BEGIN_SRC bash
     cat <<EOF > .credentials.yml
     email:
       username: some.email@gmail.com
       password: password
       recipients:
         - who.getsthis@email.com
         - who.else@eeeemail.com
     EOF
   #+END_SRC
   Actual backup and restoration
   #+BEGIN_SRC bash
   make backup  # creates a file and tries to mail it to you...
   make restore BACKUP=timesheet_$(sometimestamp).sql
   #+END_SRC
   
   debug
   #+BEGIN_SRC bash
   make psql  # logs you into the dockerized postgres. Our examples should have three schemas "work", "personal" and "common"
   make resetdb # WIPE EVERYTHING! destroy everything and rebuild database (no schemas)
   #+END_SRC

** Goals
   - learn postgres, pgsql
   - learn Make
   - have something useful from the experience
   - learn Python3 asyncio
   - be able to write a story about what happened on what day.. 
** Features
   - commandline tool to log timesheets
   - backup functionality (email for now, until we can figure out staging a proper replication strategy)
   - simple cli based
   - export to xls/csv?
   - restore functionality (needs to be fixed)
** TODO-list
   - RESTful API
   - Multiple notes to a period.
   - Supervisor job to monitor system state?
   - Log when sleep, wake ? OSX version:
     #+BEGIN_SRC python
       #!/usr/bin/env python

       from AppKit import NSWorkspace, NSWorkspaceWillSleepNotification, \
                          NSWorkspaceDidWakeNotification, NSObject, \
                          NSApplication, NSLog

       class App(NSObject):

           def applicationDidFinishLaunching_(self, notification):
               workspace          = NSWorkspace.sharedWorkspace()
               notificationCenter = workspace.notificationCenter()
               notificationCenter.addObserver_selector_name_object_(
                   self,
                   self.receiveSleepNotification_,
                   NSWorkspaceWillSleepNotification,
                   None
               )
               notificationCenter.addObserver_selector_name_object_(
                   self,
                   self.receiveWakeNotification_,
                   NSWorkspaceDidWakeNotification,
                   None
               )

           def receiveSleepNotification_(self, notification):
               NSLog("receiveSleepNotification: %@", notification)

           def receiveWakeNotification_(self, notification):
               NSLog("receiveWakeNotification: %@", notification)

       if __name__ == '__main__':
           sharedapp = NSApplication.sharedApplication()
           app       = App.alloc().init()
           sharedapp.setDelegate_(app)
           sharedapp.run()

    #+END_SRC
* NOTES:
  - The schema... ideas:
    Perhaps the period table should be common among projects? You can't be working on more than one thing at a time.(#OPINIONATED!)
  #+BEGIN_SRC python
    import aiopg
    import asyncio
    from aiohttp import web

    loop = asyncio.get_event_loop()
    app = web.Application(loop=loop)


    async def get_today():
        conn = await aiopg.connect(database='timesheet',
                                   host='127.0.0.1')
        cur = await conn.cursor()
        await cur.execute("SELECT * FROM timesheet.today")
        retval = []
        async for elem in cur:
            return elem

    async def index(request):
        values = await get_today()
        for value in values:
            print("..",values)
        return web.Response(text="Hello there")


    app.router.add_get("/", index)
    web.run_app(app, host='127.0.0.1', port=8088)

  #+END_SRC

** endpoints
   - POST /period   # start
   - PUT  /period/1 # stop period ? adjust time?
   - POST /period/1/note  # add note to period 1
   - GET  /period  # all
   - GET  /period/today # today's entries

** projects?
   /project/1/period or /project/takealot/period and /project/hackytime/period
   Apparently you get template databases but not template schemas. Template schemas are not formalised so create a schema, then apply tables to that schema. Common sql tables file?

