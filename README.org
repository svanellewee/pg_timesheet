* Postgres Based timesheet application
** Goals
   - learn postgres, pgsql
   - learn Make
   - have something useful from the experience
** Features
   - commandline tool to log timesheets
   - backup functionality (email for now, until we can figure out staging a proper replication strategy)
   - simple cli based
   - export to xls/csv?
   - restore functionality (needs to be fixed)
** TODO-list
   - RESTful API
   - Multiple notes to a period.
   - Supervisor job to monitor system state?
   - Log when sleep, wake ? OSX version:
     #+BEGIN_SRC python
       #!/usr/bin/env python

       from AppKit import NSWorkspace, NSWorkspaceWillSleepNotification, \
                          NSWorkspaceDidWakeNotification, NSObject, \
                          NSApplication, NSLog

       class App(NSObject):

           def applicationDidFinishLaunching_(self, notification):
               workspace          = NSWorkspace.sharedWorkspace()
               notificationCenter = workspace.notificationCenter()
               notificationCenter.addObserver_selector_name_object_(
                   self,
                   self.receiveSleepNotification_,
                   NSWorkspaceWillSleepNotification,
                   None
               )
               notificationCenter.addObserver_selector_name_object_(
                   self,
                   self.receiveWakeNotification_,
                   NSWorkspaceDidWakeNotification,
                   None
               )

           def receiveSleepNotification_(self, notification):
               NSLog("receiveSleepNotification: %@", notification)

           def receiveWakeNotification_(self, notification):
               NSLog("receiveWakeNotification: %@", notification)

       if __name__ == '__main__':
           sharedapp = NSApplication.sharedApplication()
           app       = App.alloc().init()
           sharedapp.setDelegate_(app)
           sharedapp.run()

    #+END_SRC
* NOTES:
  #+BEGIN_SRC python
    import aiopg
    import asyncio
    from aiohttp import web

    loop = asyncio.get_event_loop()
    app = web.Application(loop=loop)


    async def get_today():
        conn = await aiopg.connect(database='timesheet',
                                   host='127.0.0.1')
        cur = await conn.cursor()
        await cur.execute("SELECT * FROM timesheet.today")
        retval = []
        async for elem in cur:
            return elem

    async def index(request):
        values = await get_today()
        for value in values:
            print("..",values)
        return web.Response(text="Hello there")


    app.router.add_get("/", index)
    web.run_app(app, host='127.0.0.1', port=8088)

  #+END_SRC
